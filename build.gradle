buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:1.2.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
    }
}
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'pmd'

import groovy.json.JsonSlurper
import org.ajoberstar.grgit.*

ext.repo = Grgit.open(project.file('.'))

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

apply plugin: 'net.minecraftforge.gradle.forge'
group = package_group

archivesBaseName = mod_name
def mod_version = "v${mod_version_major}.${mod_version_minor}.${mod_version_patch}"
version = "${mc_version}-${mod_version}"

pmd {
    consoleOutput = true
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace "@VERSION@", mod_version
    mappings = "snapshot_20160619"
    
}




processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }

}

targetCompatibility=8
sourceCompatibility=8

jar {
    classifier = ''
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash
    )
}

// Javadoc Jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Deobfuscated Jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.build.dependsOn sourceJar, javadocJar, deobfJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

//IDEA assets fix
idea { module { inheritOutputDirs = true } }


//Retrieves recent releases, if it finds the release tag on github it will skip the deployment
def shouldTag(silent){
    def p = new URL ("https://api.github.com/repos/${github_repo}/releases?access_token=${token}").text
    def json = new JsonSlurper().parseText(p)
    if(!silent)
    println "Searching for " + version + " in ${github_repo}"

    for (item in json) {
        if(item.tag_name == version){
            return false
        }
    }
    return true
}

//Task for setting the enviro var
task shouldDeploy << {
    System.setProperty("DEPLOY", shouldTag(true).toString())
    println(System.getProperty("DEPLOY"));
}

//Actual tagging task
task tagRelease {
    doLast {
        if(shouldTag(false)) {
            println "Releasing ${version}."
            System.setProperty("org.ajoberstar.grgit.auth.username", "$usr")
            System.setProperty("org.ajoberstar.grgit.auth.password", "$psw")
            repo.tag.add {
                name = version
                message = "Release of ${version} built against forge ${forge_version}"
                pointsTo = gitHash
            }
            repo.push {
                tags = true
            }
        } else {
            println "${version} already exists."
        }
    }
}


